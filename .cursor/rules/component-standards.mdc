---
description: 
globs: 
alwaysApply: false
---
# Minimal PWA Component Standards

## Philosophy
- **Minimal**: Keep components as simple as possible
- **Functional**: Use only functional components
- **Accessible**: Follow accessibility best practices
- **Bi-color**: Support only black and white theming

## Component Structure
- Use functional components with TypeScript
- Keep components minimal and single-purpose
- Avoid unnecessary abstraction
- Focus on essential functionality only

## Props and Types
```tsx
interface ComponentProps {
  title: string
  description?: string
  onClick?: () => void
  children?: React.ReactNode
}
```

## Minimal Component Template
```tsx
interface ComponentProps {
  // Essential props only
}

export default function Component({ 
  prop1, 
  prop2 
}: ComponentProps) {
  // Minimal logic
  
  return (
    <div className="simple-class">
      {/* Semantic HTML */}
    </div>
  )
}
```

## Best Practices
- Use semantic HTML elements
- Implement proper accessibility (ARIA labels, keyboard navigation)
- Support both light and dark themes
- Optimize for touch interactions (44px minimum touch targets)
- Use consistent naming:
  - PascalCase for components
  - camelCase for props/variables
  - Simple CSS class names

## State Management
- Use useState for simple local state
- Keep state minimal and focused
- Avoid complex state patterns for this minimal app

## Styling Approach
- Use CSS custom properties from globals.css
- Class names should be simple and descriptive
- Support system theme preferences
- Mobile-first responsive design

## PWA Considerations
- Support touch interactions
- Respect prefers-reduced-motion
- Handle offline states gracefully
- Support safe area insets for mobile devices
